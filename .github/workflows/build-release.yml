name: build-release

on:
  workflow_dispatch:
    inputs:
      releaseTitle:
        description: "Release title"
        required: true
      tagVersion:
        description: "Tag version"
        required: true


permissions:
  actions: read
  contents: read

jobs:
  linuxBuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm exec nx run-many -t build --configuration=production
      - run: pnpm exec nx run servicebus-browser-app:make --extraMetadata.version=${{ github.event.inputs.tagVersion }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: dist/executables


  windowsBuild:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm exec nx run-many -t build --configuration=production
      - run: pnpm exec nx run servicebus-browser-app:make --extraMetadata.version=${{ github.event.inputs.tagVersion }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: dist/executables

  macBuild:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm exec nx run-many -t build --configuration=production
      - run: pnpm exec nx run servicebus-browser-app:make --extraMetadata.version=${{ github.event.inputs.tagVersion }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: dist/executables

  createRelease:
    name: Create the release
    runs-on: ubuntu-latest
    needs: [windowsBuild, linuxBuild, macBuild]
    steps:
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ github.event.inputs.tagVersion }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: ${{ github.event.inputs.releaseTitle }}
          commitish: master
          draft: true
      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: windows
      - name: Download Mac Build
        uses: actions/download-artifact@v4
        with:
          name: mac-release
          path: mac
      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: linux-release
          path: linux
      - name: Display structure of downloaded files
        run: ls -R
      - name: Publish windows build to release
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./windows/Servicebus browser.exe
          asset_name: "Servicebus Browser.exe"
          asset_content_type: application/exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Linux build to release
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./linux/Servicebus browser.AppImage
          asset_name: "Servicebus Browser.AppImage"
          asset_content_type: application/appimage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Mac build to release
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./mac/Servicebus browser.dmg
          asset_name: "Servicebus Browser.dmg"
          asset_content_type: application/dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
