name: build-release

on:
  workflow_dispatch:
    inputs:
      releaseTitle:
        description: "Release title"
        required: true
      tagVersion:
        description: "Tag version"
        required: true


permissions:
  actions: read
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  webBuild:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm exec nx run servicebus-browser-web-frontend:build:production
      - run: pnpm exec nx run servicebus-browser-web-backend:build:production

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Publish release as artifect
        uses: actions/upload-artifact@v4
        with:
          name: web-release
          path: dist

  linuxBuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm version ${{ github.event.inputs.tagVersion }}  --no-git-tag-version
      - name: Patch electron app version
        shell: bash
        env:
          TAG_VERSION: ${{ github.event.inputs.tagVersion }}
        run: pnpm run patch-files
      - run: pnpm exec nx run servicebus-browser-frontend:build:production
      - run: pnpm exec nx run servicebus-browser-app:build:production
      - run: pnpm exec nx run servicebus-browser-app:make --extraMetadata.version=${{ github.event.inputs.tagVersion }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: dist/executables


  windowsBuild:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm version ${{ github.event.inputs.tagVersion }} --no-git-tag-version
      - name: Patch electron app version
        shell: bash
        env:
          TAG_VERSION: ${{ github.event.inputs.tagVersion }}
        run: pnpm run patch-files
      - run: pnpm exec nx run servicebus-browser-frontend:build:production
      - run: pnpm exec nx run servicebus-browser-app:build:production
      - run: pnpm exec nx run servicebus-browser-app:make --extraMetadata.version=${{ github.event.inputs.tagVersion }}
      - name: Publish release as artifect
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: dist/executables

  macBuild:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm version ${{ github.event.inputs.tagVersion }} --no-git-tag-version
      - name: Patch electron app version
        shell: bash
        env:
          TAG_VERSION: ${{ github.event.inputs.tagVersion }}
        run: pnpm run patch-files
      - run: pnpm exec nx run servicebus-browser-frontend:build:production
      - run: pnpm exec nx run servicebus-browser-app:build:production
      - name: Build executable
        env:
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: pnpm exec nx run servicebus-browser-app:make --extraMetadata.version=${{ github.event.inputs.tagVersion }} --configuration=macos-notarize
      - name: Publish release as artifect
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: dist/executables

  createRelease:
    name: Create the release
    runs-on: ubuntu-latest
    needs: [webBuild, windowsBuild, linuxBuild, macBuild]
    permissions:
      contents: write
    steps:
      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: windows
      - name: Download Mac Build
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: mac
      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: linux-release
          path: linux
      - name: Display structure of downloaded files
        run: ls -R
      - name: prepare resource folder
        run: |
            mkdir -p release
            cp "windows/Servicebus browser.exe" "release/servicebus-browser-windows.exe"
            cp "linux/Servicebus browser.AppImage" "release/servicebus-browser-linux.AppImage"
            cp "mac/Servicebus browser.dmg" "release/servicebus-browser-mac-arm64.dmg"
            cp "mac/Servicebus browser.zip" "release/servicebus-browser-mac-arm64.zip"

      - uses: ncipollo/release-action@v1
        with:
            name: ${{ github.event.inputs.releaseTitle }}
            tag: ${{ github.event.inputs.tagVersion }}
            body: This is a release
            draft: true
            artifacts: release/*.*
